import { useEffect, useMemo, useRef, useState } from 'react'
import { motion } from 'framer-motion'
import {
  FaArrowDown,
  FaComments,
  FaExclamationTriangle,
  FaPaperPlane,
  FaRobot,
} from 'react-icons/fa'
import { NewGeminiService } from '../services/geminiService'
import React from 'react'

const EMOTION_GUIDANCE = {
  angry: {
    label: 't·ª©c gi·∫≠n',
    intro:
      'Nh·ªØng c·∫£m x√∫c m·∫°nh m·∫Ω ƒë√¥i khi r·∫•t kh√≥ di·ªÖn ƒë·∫°t. M√¨nh ƒëang l·∫Øng nghe ƒë√¢y.',
  },
  sad: {
    label: 'bu·ªìn',
    intro:
      'M√¨nh hi·ªÉu c·∫£m gi√°c n√†y c√≥ th·ªÉ r·∫•t n·∫∑ng n·ªÅ. B·∫°n c√≥ mu·ªën t√¢m s·ª± th√™m v·ªõi m√¨nh kh√¥ng?',
  },
  tired: {
    label: 'm·ªát m·ªèi',
    intro:
      'M·ªát m·ªèi l√† t√≠n hi·ªáu c∆° th·ªÉ c·∫ßn ƒë∆∞·ª£c chƒÉm s√≥c. B·∫°n mu·ªën k·ªÉ cho m√¨nh nghe ƒëi·ªÅu g√¨ l√†m b·∫°n ki·ªát s·ª©c kh√¥ng?',
  },
  anxious: {
    label: 'lo l·∫Øng',
    intro:
      'Lo l·∫Øng c√≥ th·ªÉ khi·∫øn m·ªçi th·ª© tr·ªü n√™n m∆° h·ªì. H√£y n√≥i v·ªõi m√¨nh ƒëi·ªÅu khi·∫øn b·∫°n bƒÉn khoƒÉn nh·∫•t nh√©.',
  },
  happy: {
    label: 'vui v·∫ª',
    intro:
      'Nghe th·∫≠t tuy·ªát! H√£y k·ªÉ cho m√¨nh nghe ƒëi·ªÅu g√¨ ƒëang khi·∫øn b·∫°n h·∫°nh ph√∫c nh√©.',
  },
  calm: {
    label: 'b√¨nh y√™n',
    intro:
      'Th·∫≠t d·ªÖ ch·ªãu khi ƒë∆∞·ª£c nghe ƒëi·ªÅu n√†y. B·∫°n mu·ªën chia s·∫ª th√™m v·ªÅ c·∫£m gi√°c b√¨nh y√™n ƒë√≥ ch·ª©?',
  },
}

const BASE_WELCOME = 'Xin ch√†o! M√¨nh l√† EduMood, ng∆∞·ªùi b·∫°n AI lu√¥n s·∫µn s√†ng l·∫Øng nghe b·∫°n b·∫•t c·ª© l√∫c n√†o.'

function ChatPlaceholder({ selectedEmotion }) {
  const geminiServiceRef = useRef(null)
  if (!geminiServiceRef.current) {
    geminiServiceRef.current = new NewGeminiService()
  }
  const geminiService = geminiServiceRef.current
  const [messages, setMessages] = useState([
    { id: 'welcome', role: 'model', text: BASE_WELCOME },
  ])
  const [draft, setDraft] = useState('')
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState(null)
  const messagesContainerRef = useRef(null)
  const chatBoxRef = useRef(null)
  const hasAutoScrolledRef = useRef(false)

  const emotionIntro = useMemo(() => {
    if (!selectedEmotion) return null
    const config = EMOTION_GUIDANCE[selectedEmotion]
    if (!config) {
      return '\n\nM√¨nh r·∫•t mu·ªën hi·ªÉu th√™m c·∫£m x√∫c c·ªßa b·∫°n. H√£y c·ª© chia s·∫ª theo c√°ch b·∫°n th·∫•y tho·∫£i m√°i nh·∫•t nh√©.'
    }
    return `\n\nM√¨nh c·∫£m nh·∫≠n ƒë∆∞·ª£c b·∫°n ƒëang ${config.label}. ${config.intro}`
  }, [selectedEmotion])

  useEffect(() => {
    if (!selectedEmotion) {
      setMessages([{ id: 'welcome', role: 'model', text: BASE_WELCOME }])
      setDraft('')
      setError(null)
      return
    }

    setMessages([
      {
        id: `intro-${selectedEmotion}`,
        role: 'model',
        text: `${BASE_WELCOME} ${emotionIntro}`,
      },
    ])
    setDraft('')
    setError(null)
  }, [emotionIntro, selectedEmotion])

  useEffect(() => {
    const behavior = hasAutoScrolledRef.current ? 'smooth' : 'auto'
    hasAutoScrolledRef.current = true

    const container = messagesContainerRef.current
    if (container) {
      const scrollOptions = { top: container.scrollHeight, behavior }
      if (typeof container.scrollTo === 'function') {
        container.scrollTo(scrollOptions)
      } else {
        container.scrollTop = container.scrollHeight
      }
    }
    const chatBox = chatBoxRef.current
    if (chatBox && typeof chatBox.scrollIntoView === 'function') {
      requestAnimationFrame(() => chatBox.scrollIntoView({ behavior, block: 'end' }))
    }
  }, [messages])

  const handleSend = async (event) => {
    event.preventDefault()
    const trimmed = draft.trim()
    if (!trimmed) return

    if (!selectedEmotion) {
      setError('B·∫°n h√£y ch·ªçn c·∫£m x√∫c hi·ªán t·∫°i c·ªßa m√¨nh tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu nh√©!')
      return
    }

    const emotionLabel = EMOTION_GUIDANCE[selectedEmotion]?.label || selectedEmotion

    const historyPayload = [
      {
        role: 'user',
        parts: [
          {
            text: `B·ªëi c·∫£nh: Ng∆∞·ªùi ƒë·ªëi tho·∫°i ƒëang c·∫£m th·∫•y ${emotionLabel}. H√£y ph·∫£n h·ªìi ho√†n to√†n b·∫±ng ti·∫øng Vi·ªát v·ªõi s·ª± ƒë·ªìng c·∫£m v√† h·ªó tr·ª£ tinh th·∫ßn cho h·ªçc sinh Vi·ªát Nam.`,
          },
        ],
      },
      ...messages.map((message) => ({
        role: message.role,
        parts: [{ text: message.text }],
      })),
    ]

    const userMessage = {
      id: `user-${Date.now()}`,
      role: 'user',
      text: trimmed,
    }

    setMessages((prev) => [...prev, userMessage])
    setDraft('')
    setIsLoading(true)
    setError(null)

    try {
      const responseText = await geminiService.chat(historyPayload, trimmed)
      const finalText = responseText?.trim()
        ? responseText.trim()
        : 'Xin l·ªói nh√©, m√¨nh ƒëang h∆°i b·ªëi r·ªëi. B·∫°n c√≥ th·ªÉ chia s·∫ª l·∫°i cho m√¨nh ƒë∆∞·ª£c kh√¥ng?'

      setMessages((prev) => [
        ...prev,
        {
          id: `model-${Date.now()}`,
          role: 'model',
          text: finalText,
        },
      ])
    } catch (err) {
      console.error('Gemini chat error:', err)
      setError('√îi! M√¨nh g·∫∑p ch√∫t tr·ª•c tr·∫∑c k·∫øt n·ªëi. B·∫°n th·ª≠ l·∫°i sau v√†i gi√¢y nh√©.')
      setMessages((prev) => [
        ...prev,
        {
          id: `model-error-${Date.now()}`,
          role: 'model',
          text: 'Xin l·ªói b·∫°n nh√©, hi·ªán t·∫°i m√¨nh ch∆∞a th·ªÉ ph·∫£n h·ªìi ƒë∆∞·ª£c. Ch√∫ng ta th·ª≠ l·∫°i sau ch√∫t x√≠u nh√©?',
        },
      ])
    } finally {
      setIsLoading(false)
    }
  }

  const isReadyToChat = Boolean(selectedEmotion)
  const canSend = isReadyToChat && draft.trim().length > 0 && !isLoading

  return (
    <section className="container mx-auto px-4 py-12">
      <motion.div
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ duration: 0.6 }}
        className="max-w-4xl mx-auto"
      >
        <div className="glass-effect rounded-3xl p-8 shadow-2xl">
          <div className="flex items-center justify-center mb-6">
            <motion.div
              animate={{ y: [0, -10, 0] }}
              transition={{ duration: 2, repeat: Infinity }}
              className="text-6xl"
            >
              üí¨
            </motion.div>
          </div>

          <div className="text-center mb-8">
            <h2 className="text-3xl md:text-4xl font-bold text-gray-800 mb-4">
              <FaComments className="inline-block mr-2 text-primary-500" />
              Khu v·ª±c Chat v·ªõi AI
            </h2>
            <p className="text-gray-600 text-lg">
              Chia s·∫ª c·∫£m x√∫c c·ªßa b·∫°n v·ªõi EduMood ƒë·ªÉ ƒë∆∞·ª£c l·∫Øng nghe v√† ƒë·ªìng h√†nh
            </p>
          </div>

          {!isReadyToChat && (
            <div className="bg-gray-100 rounded-2xl p-6 mb-6 text-center">
              <p className="text-gray-500">
                üëÜ H√£y ch·ªçn c·∫£m x√∫c c·ªßa b·∫°n ·ªü tr√™n ƒë·ªÉ m√¨nh c√≥ th·ªÉ tr√≤ chuy·ªán s√¢u h∆°n nh√©!
              </p>
            </div>
          )}

          <div className="bg-gray-50 rounded-2xl p-6 md:p-8 border border-gray-200">
            <div className="flex items-center justify-center mb-6">
              <div className="w-12 h-12 bg-primary-500 rounded-full flex items-center justify-center shadow-lg">
                <FaRobot className="text-white text-2xl" />
              </div>
            </div>

            <div
              ref={messagesContainerRef}
              className="bg-white rounded-2xl border border-gray-100 shadow-inner p-4 h-80 overflow-y-auto space-y-4"
            >
              {messages.map((message) => (
                <div
                  key={message.id}
                  className={`flex ${
                    message.role === 'user' ? 'justify-end' : 'justify-start'
                  }`}
                >
                  {message.role === 'model' && (
                    <div className="w-10 h-10 bg-primary-100 text-primary-600 rounded-full flex items-center justify-center mr-3">
                      <FaRobot />
                    </div>
                  )}
                  <div
                    className={`max-w-[80%] rounded-2xl px-4 py-3 text-sm md:text-base leading-relaxed shadow-sm ${
                      message.role === 'user'
                        ? 'bg-primary-500 text-white'
                        : 'bg-gray-50 text-gray-700'
                    }`}
                  >
                    {/* There will be \n\n in the text, turn it into <br /> */}
                    {message.text.split('\n').map((part, index) => (
                      <React.Fragment key={index}>
                        {part}
                        {index < message.text.split('\n').length - 1 && <br />}
                      </React.Fragment>
                    ))}
                  </div>
                </div>
                  ))}
              </div>

            <form ref={chatBoxRef} onSubmit={handleSend} className="mt-6 space-y-3">
              <label htmlFor="chat-input" className="block text-sm font-medium text-gray-600">
                Vi·∫øt chia s·∫ª c·ªßa b·∫°n ·ªü ƒë√¢y
              </label>
              <textarea
                id="chat-input"
                className="w-full min-h-[120px] rounded-2xl border border-gray-200 bg-white p-4 text-sm md:text-base shadow-sm focus:outline-none focus:ring-4 focus:ring-primary-100 focus:border-primary-400 transition"
                placeholder={
                  isReadyToChat
                    ? 'V√≠ d·ª•: H√¥m nay m√¨nh c·∫£m th·∫•y √°p l·ª±c v√¨ b√†i ki·ªÉm tra...'
                    : 'Tr∆∞·ªõc ti√™n h√£y ch·ªçn c·∫£m x√∫c c·ªßa b·∫°n nh√©!'
                }
                value={draft}
                onChange={(event) => setDraft(event.target.value)}
                disabled={!isReadyToChat || isLoading}
              />

              <div className="flex items-center justify-between">
                {error && (
                  <div className="flex items-center text-sm text-red-600">
                    <FaExclamationTriangle className="mr-2" />
                    {error}
                  </div>
                )}

                <button
                  type="submit"
                  disabled={!canSend}
                  className={`inline-flex items-center gap-2 rounded-full px-6 py-3 font-semibold transition focus:outline-none focus:ring-4 focus:ring-primary-200 ${
                    canSend
                      ? 'bg-primary-500 text-white hover:bg-primary-600'
                      : 'bg-gray-200 text-gray-500 cursor-not-allowed'
                  }`}
                >
                  <FaPaperPlane className={isLoading ? 'animate-pulse' : ''} />
                  {isLoading ? 'ƒêang g·ª≠i...' : 'G·ª≠i l·ªùi chia s·∫ª'}
                </button>
              </div>
            </form>

            <div className="mt-6 pt-4 border-t border-gray-200 text-sm text-gray-500 flex flex-wrap gap-2 justify-center">
              <span className="font-medium">üí° G·ª£i √Ω:</span>
              <span>"H√¥m nay m√¨nh c·∫£m th·∫•y..."</span>
              <span>"ƒêi·ªÅu khi·∫øn m√¨nh b·∫≠n t√¢m l√†..."</span>
              <span>"M√¨nh mong mu·ªën..."</span>
            </div>
          </div>
        </div>

        <motion.div
          animate={{ y: [0, 10, 0] }}
          transition={{ duration: 1.5, repeat: Infinity }}
          className="text-center mt-8"
        >
          <FaArrowDown className="text-4xl text-gray-400 mx-auto" />
        </motion.div>
      </motion.div>
    </section>
  )
}

export default ChatPlaceholder
